* Interesting links:

** Docker on ubuntu:
https://docs.docker.com/engine/install/ubuntu/

** Nvidia container repo:
https://gitlab.com/nvidia/container-images/cuda.git

* COMMENT Sample:

** Location:
#+begin_src sh :shebang #!/usr/bin/sh :results output
  pwd
#+end_src

#+RESULTS:
: /home/asd/GITHUB/aravind-h-v/template_repo/full_docker

* Main setup parts:

** Verify You Have a CUDA-Capable GPU:
#+begin_src sh :shebang #!/bin/sh :results output
  lspci | grep -i nvidia
#+end_src

** Verify You Have a Supported Version of Linux:
#+begin_src sh :shebang #!/bin/sh :results output
  uname -m && cat /etc/*release
#+end_src

** Install basic stuff:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_general.sh
  sudo apt-get update

  sudo apt-get install -y \
      'aria2' \
      'build-essential' \
      'cpio' \
      'fish' \
      'fizsh' \
      'git' \
      'git-lfs' \
      'squashfs-tools' \
      'zstd' \
  ;
#+end_src

** COMMENT Change default shell to fish for easier interactive use (optional):
#+begin_src sh :shebang #!/usr/bin/sh :results output
  sudo chsh -s '/usr/bin/fish' ubuntu
#+end_src

** Install rust (optional):

*** Main link:
https://www.rust-lang.org/tools/install

*** Script to install:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./install_rust.sh
  curl --proto '=https' --tlsv1.2 -sSf 'https://sh.rustup.rs' | sh
#+end_src

*** Script to activate cargo:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./install_rust.sh
  . "${HOME}/.cargo/env"
  cargo install zellij
#+end_src

*** Script to start zellij:
#+begin_src sh :shebang #!/usr/bin/sh :results output
  zellij attach --create
#+end_src

** Verify the System Has gcc Installed:
#+begin_src sh :shebang #!/bin/sh :results output
  gcc --version
#+end_src

** Verify the System has the Correct Kernel Headers and Development Packages Installed:
#+begin_src sh :shebang #!/bin/sh :results output
  uname -r
#+end_src

** Installing NVIDIA's repo for latest GPU drivers and cuda:

*** Remove Outdated Signing Key:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_nvidia.sh
  sudo apt-key del 7fa2af80
#+end_src

*** Enroll the new signing key manually:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_nvidia.sh
  DISTRO='ubuntu2204'
  ARCH='x86_64'
  wget "https://developer.download.nvidia.com/compute/cuda/repos/${DISTRO}/${ARCH}/cuda-keyring_1.1-1_all.deb"
  sudo dpkg -i 'cuda-keyring_1.1-1_all.deb'
#+end_src

*** Write the repo:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_nvidia.sh
  DISTRO='ubuntu2204'
  ARCH='x86_64'
  echo "deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/${DISTRO}/${ARCH}/ /" > "/etc/apt/sources.list.d/cuda-${DISTRO}-${ARCH}.list"
#+end_src

*** Pin the repo:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_nvidia.sh
  DISTRO='ubuntu2204'
  ARCH='x86_64'
  wget "https://developer.download.nvidia.com/compute/cuda/repos/${DISTRO}/${ARCH}/cuda-${DISTRO}.pin"
  sudo mv "cuda-${DISTRO}.pin" '/etc/apt/preferences.d/cuda-repository-pin-600'
#+end_src

*** Update and install:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_nvidia.sh
  sudo apt-get update
  sudo apt-get install -y cuda cuda-toolkit
#+end_src

** Installing latest docker stuff:

*** Uninstall all conflicting packages:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
  sudo apt-get remove docker.io
  sudo apt-get remove docker-doc
  sudo apt-get remove docker-compose
  sudo apt-get remove podman-docker
  sudo apt-get remove containerd
  sudo apt-get remove runc
#+end_src

*** Update the =apt= package index and install packages to allow =apt= to use a repository over HTTPS:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
  sudo apt-get update
  sudo apt-get install -y ca-certificates curl gnupg
#+end_src

*** Add Docker's official GPG key:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
  sudo install -m 0755 -d '/etc/apt/keyrings'
  curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | sudo gpg --dearmor -o '/etc/apt/keyrings/docker.gpg'
  sudo chmod 'a+r' '/etc/apt/keyrings/docker.gpg'
#+end_src

*** Set up the repository:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
  echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list
#+end_src

*** Update the =apt= package index:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
  sudo apt-get update
#+end_src

*** Install the latest version of docker:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
  sudo apt-get install -y \
      'docker-ce' \
      'docker-ce-cli' \
      'containerd.io' \
      'docker-buildx-plugin' \
      'docker-compose-plugin' \
  ;
#+end_src

** Install Nvidia container toolkit:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
  sudo apt-get install -y \
      'nvidia-container-toolkit' \
      'nvidia-container-toolkit-base' \
  ;
#+end_src

** Restart docker daemon:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo systemctl 'restart' 'docker'
#+end_src

** Search for images:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo docker 'search' 'cuda'
#+end_src

** Pull cuda 11.7 image:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo docker 'pull' 'nvidia/cuda:11.7.1-devel-ubuntu22.04'
#+end_src

** Nvidia CTK Related:

*** Check version:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo nvidia-ctk '--version'
#+end_src

*** Generate configs:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo nvidia-ctk 'cdi' 'generate' '--output=/etc/cdi/nvidia.yaml'
  sudo nvidia-ctk 'cdi' 'generate' '--output=/var/run/cdi/nvidia.yaml'
#+end_src

*** Check generated file:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  grep '  name:' '/etc/cdi/nvidia.yaml'
#+end_src

*** Configure for docker:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo nvidia-ctk 'runtime' 'configure' '--runtime=docker'
#+end_src

*** Restart docker daemon:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo systemctl restart docker
#+end_src

*** Try running sample command inside:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
  sudo docker 'run' '--rm' '--runtime=nvidia' '--gpus' 'all' 'nvidia/cuda:11.7.1-devel-ubuntu22.04' 'nvidia-smi'
#+end_src
This command should succeed and produce the same output as running =nvidia-smi= on the host.
Now we are ready to build and run any docker container.

** Script to run the whole thing automatically:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./full_install.sh
  './apt_install_general.sh'
  './apt_install_nvidia.sh'
  './apt_install_docker.sh'
  './setup_docker.sh'
  exit '0'
#+end_src

* COMMENT Make all the changes and check status:

** This file stuff:
#+begin_src emacs-lisp :results output
  (save-buffer) 
  (save-some-buffers) 
  (org-babel-tangle)
#+end_src

#+RESULTS:

* Sample:

** General:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_general.sh
#+end_src

** Nvidia:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_nvidia.sh
#+end_src

** Docker:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./apt_install_docker.sh
#+end_src

** Setup docker:
#+begin_src sh :shebang #!/usr/bin/sh :results output :tangle ./setup_docker.sh
#+end_src
