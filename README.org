* Intro:
Random stuff accumulated here. Also has python env setup.

* Important links:

** Anaconda python link:
https://repo.anaconda.com/archive/Anaconda3-2023.07-1-Linux-x86_64.sh

** Prompt reweighting and compel library:
https://huggingface.co/docs/diffusers/using-diffusers/weighted_prompts

** Interesting repo for semantic segmentation:
https://github.com/facebookresearch/segment-anything.git

** Colab notebook for automatic1111 SD web UI:
https://colab.research.google.com/github/TheLastBen/fast-stable-diffusion/blob/main/fast_stable_diffusion_AUTOMATIC1111.ipynb

* Cuda installation for ubuntu:

** Main link:
https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#ubuntu

** COMMENT Sample:
#+begin_src sh :shebang #!/bin/sh :results output
#+end_src

** Verify You Have a CUDA-Capable GPU:

#+begin_src sh :shebang #!/bin/sh :results output
  lspci | grep -i nvidia
#+end_src

#+RESULTS:
: 01:00.0 VGA compatible controller: NVIDIA Corporation GA104M [GeForce RTX 3070 Mobile / Max-Q] (rev a1)
: 01:00.1 Audio device: NVIDIA Corporation GA104 High Definition Audio Controller (rev a1)

** Verify You Have a Supported Version of Linux:

#+begin_src sh :shebang #!/bin/sh :results output
  uname -m && cat /etc/*release
#+end_src

#+RESULTS:
#+begin_example
x86_64
DISTRIB_ID=Pop
DISTRIB_RELEASE=22.04
DISTRIB_CODENAME=jammy
DISTRIB_DESCRIPTION="Pop!_OS 22.04 LTS"
NAME="Pop!_OS"
VERSION="22.04 LTS"
ID=pop
ID_LIKE="ubuntu debian"
PRETTY_NAME="Pop!_OS 22.04 LTS"
VERSION_ID="22.04"
HOME_URL="https://pop.system76.com"
SUPPORT_URL="https://support.system76.com"
BUG_REPORT_URL="https://github.com/pop-os/pop/issues"
PRIVACY_POLICY_URL="https://system76.com/privacy"
VERSION_CODENAME=jammy
UBUNTU_CODENAME=jammy
LOGO=distributor-logo-pop-os
#+end_example

** Verify the System Has gcc Installed:

#+begin_src sh :shebang #!/bin/sh :results output
  gcc --version
#+end_src

#+RESULTS:
: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
: Copyright (C) 2021 Free Software Foundation, Inc.
: This is free software; see the source for copying conditions.  There is NO
: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
: 

** Verify the System has the Correct Kernel Headers and Development Packages Installed:

#+begin_src sh :shebang #!/bin/sh :results output
  uname -r
#+end_src

#+RESULTS:
: 6.2.6-76060206-generic

** Remove Outdated Signing Key:
#+begin_src sh :shebang #!/bin/sh :results output
  sudo apt-key del 7fa2af80
#+end_src

** Enroll the new signing key manually:
#+begin_src sh :shebang #!/bin/sh :results output
  DISTRO='ubuntu2204'
  ARCH='x86_64'
  wget "https://developer.download.nvidia.com/compute/cuda/repos/${DISTRO}/${ARCH}/cuda-keyring_1.1-1_all.deb"
  sudo dpkg -i 'cuda-keyring_1.1-1_all.deb'
#+end_src

** Write the repo:
#+begin_src sh :shebang #!/bin/sh :results output
  DISTRO='ubuntu2204'
  ARCH='x86_64'
  echo "deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/${DISTRO}/${ARCH}/ /" > "/etc/apt/sources.list.d/cuda-${DISTRO}-${ARCH}.list"
#+end_src

** Pin the repo:
#+begin_src sh :shebang #!/bin/sh :results output
  DISTRO='ubuntu2204'
  ARCH='x86_64'
  wget "https://developer.download.nvidia.com/compute/cuda/repos/${DISTRO}/${ARCH}/cuda-${DISTRO}.pin"
  sudo mv "cuda-${DISTRO}.pin" '/etc/apt/preferences.d/cuda-repository-pin-600'
#+end_src

** Update and install:
#+begin_src sh :shebang #!/bin/sh :results output
  sudo apt-get update
  sudo apt-get install cuda
  sudo apt-get install cuda-toolkit
#+end_src

* Install basic OS stuff:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  sudo apt-get 'install' \
      'aria2' \
      'build-essential' \
      'cpio' \
      'cuda-toolkit-11-7' \
      'fish' \
      'fizsh' \
      'git-lfs' \
      'squashfs-tools' \
      'zstd' \
  ;
#+end_src

* Download anaconda python:
#+begin_src sh :shebang #!/bin/sh :results output
  aria2c -c -j16 -x16 'https://repo.anaconda.com/archive/Anaconda3-2023.07-1-Linux-x86_64.sh'
#+end_src

* Activate ENV:

** Activate the env:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_activate.sh
  . /opt/anaconda/bin/activate
  conda activate myenv
#+end_src

** Important env variables:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_activate.sh
  export PATH="/usr/local/cuda-11.7/bin/:${PATH}"
  export LD_LIBRARY_PATH="/usr/local/cuda-11.7/lib64:${LD_LIBRARY_PATH}"
#+end_src

** Execute fizsh:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_activate.sh
  exec fizsh
#+end_src

* ENV Setup with conda:

** Current working directory:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  SRC_DIR="$(dirname -- "$(realpath -- "${0}")")"
  cd "${SRC_DIR}"
  pwd
#+end_src

** Activate base anaconda:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  . /opt/anaconda/bin/activate
#+end_src

** Create env:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  conda create -n myenv
#+end_src

** Activate env:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  conda activate myenv
#+end_src

** Install basic stuff:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  conda install \
      'cython' \
      'ipython' \
      'jinja2' \
      'jupyter' \
      'jupyterlab' \
      'matplotlib' \
      'nbconvert' \
      'numpy' \
      'pandas' \
      'pillow' \
      'pyqt' \
      'python' \
      'requests' \
      'scikit-image' \
      'scikit-learn' \
      'scikit-learn-intelex' \
      'scipy' \
      'tqdm' \
  ;
#+end_src

** Install conda-forge:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  conda install -c conda-forge \
      'gradio' \
      'ninja' \
      'opencv' \
      'protobuf' \
      'pudb' \
      'setuptools' \
      'streamlit' \
      'termcolor' \
  ;
#+end_src

** Download and install packages from GIT:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  get_repo(){
      URL="${1}"
      D1="$(basename -- "$(dirname -- "${URL}")")"
      D2="$(basename -- "${URL}" | sed 's@\.git$@@g')"
      DIR_PREFIX="${HOME}/GITHUB/${D1}/"
      DIR_FINAL="${DIR_PREFIX}/${D2}"
      mkdir -pv -- "${DIR_PREFIX}"
      cd "${DIR_PREFIX}"
      git clone "${URL}"
      cd "${DIR_FINAL}"
      git pull
  }

  get_repo 'https://github.com/huggingface/diffusers.git'
  pip install -e .

  get_repo 'https://github.com/pharmapsychotic/clip-interrogator.git'
  pip install -e .

  get_repo 'https://github.com/patrickvonplaten/controlnet_aux.git'
  pip install -e .

  get_repo 'https://github.com/facebookresearch/segment-anything.git'
  pip install -e .

  get_repo 'https://github.com/SysCV/sam-hq.git'
  pip install -e .

  get_repo 'https://github.com/IDEA-Research/GroundingDINO.git'
  pip install -e .

  get_repo 'https://github.com/GoGoDuck912/Self-Correction-Human-Parsing.git'

  get_repo 'https://github.com/IDEA-Research/Grounded-Segment-Anything.git'
  git submodule update --init --recursive
  cd ./segment_anything
  pip install -e .

  get_repo 'https://github.com/Hzzone/pytorch-openpose.git'
#+end_src

** COMMENT Updated pip stuff - 1:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install.sh
  pip install \
      --extra-index-url 'https://developer.download.nvidia.com/compute/redist' \
	  'gradio' \
	  'yapf' \
	  'python-lsp-server' \
	  'gdown' \
	  'test-tube' \
	  'omegaconf' \
	  'imageio' \
	  'imageio-ffmpeg' \
	  'nvidia-dali-cuda110' \
	  'albumentations' \
	  'einops' \
	  'fire' \
	  'ftfy' \
	  'tensorboard' \
	  'torch' \
	  'torchvision' \
	  'torchaudio' \
	  'torch-fidelity' \
	  'pytorch-lightning' \
	  'torchmetrics' \
	  'timm' \
	  'kornia' \
	  'salesforce-lavis' \
	  'xformers' \
	  'transformers' \
	  'accelerate' \
	  'datasets' \
	  'diffusers' \
	  'evaluate' \
	  'webdataset' \
	  'deepspeed' \
	  'triton' \
  ;
#+end_src

** COMMENT Updated pip stuff - 2:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install_dreambooth_full.sh
  pip install -U \
      'accelerate' \
      'addict' \
      'aiohttp' \
      'alive-progress' \
      'bitsandbytes' \
      'clip-retrieval' \
      'colorama' \
      'compel' \
      'controlnet_aux' \
      'deepspeed' \
      'einops' \
      'facexlib' \
      'ftfy' \
      'future' \
      'gdown' \
      'gfpgan' \
      'keyboard' \
      'lion-pytorch' \
      'lmdb' \
      'omegaconf' \
      'open_clip_torch' \
      'opencv-contrib-python' \
      'pynvml' \
      'pyre-extensions' \
      'python-lsp-server' \
      'pytorch-lightning' \
      'pyyaml' \
      'requests' \
      'safetensors' \
      'tb-nightly' \
      'tensorboard' \
      'torch==1.13.1' \
      'torchvision' \
      'transformers' \
      'triton' \
      'wandb' \
      'watchdog' \
      'xformers' \
      'yapf' \
  ;
#+end_src

** Updated pip stuff - 3:
#+begin_src sh :shebang #!/bin/sh :results output :tangle ./shrc_install_dreambooth_full.sh
  pip install \
      'accelerate>=0.16.0' \
      'addict' \
      'datasets' \
      'fairscale' \
      'ftfy' \
      'gdown' \
      'huggingface_hub' \
      'mediapipe' \
      'nltk' \
      'onnxruntime' \
      'pycocotools' \
      'PyYAML' \
      'supervision' \
      'tensorboard' \
      'timm' \
      'torch' \
      'torchvision' \
      'transformers>=4.25.1' \
      'xformers' \
      'yapf' \
  ;
#+end_src

* COMMENT Shell and elisp stuff for easy management:

** This file stuff:
#+begin_src emacs-lisp :results output
  (save-buffer) 
  (save-some-buffers) 
  (org-babel-tangle)
#+end_src

#+RESULTS:
