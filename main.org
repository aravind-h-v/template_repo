* Git management related:

** List of files to add, remove and ignore:

*** The commit message:
#+begin_src conf :tangle message.txt
  More python package install updates
#+end_src

*** Files to add:
#+begin_src conf :tangle git_add.txt
  main.org
  .gitignore
  README.org
#+end_src

*** Files to remove:
#+begin_src conf :tangle rm.txt
  .#main.org
  .main.org.~undo-tree~
  #main.org#
  main.org~
  .README.org.~undo-tree~
#+end_src

*** Files to ignore:
#+begin_src conf :tangle .gitignore
  git_add.sh
  git_add.txt
  rm.sh
  rm.txt
  tmp.sh
  message.txt
  shrc_activate.sh
  shrc_install.sh
#+end_src

** The actual scripts to do the dirty work:

*** Files to add:
#+begin_src sh :shebang #!/bin/sh :tangle git_add.sh :results output
  sed "s/^/(git add '/g ; s/\$/');/g" 'git_add.txt' | sh
#+end_src

*** Files to remove:
#+begin_src sh :shebang #!/bin/sh :tangle rm.sh :results output
  sed "s/^/(rm -vf -- '/g ; s/\$/');/g" 'rm.txt' | sh
#+end_src

** Make all the changes and check status:

*** This file stuff:
#+begin_src emacs-lisp :results output
  (save-buffer) 
  (save-some-buffers) 
  (org-babel-tangle)
#+end_src

#+RESULTS:

*** Run the git management parts:
#+begin_src sh :shebang #!/bin/sh :results output
  ./git_add.sh
  ./rm.sh
  git status
#+end_src

#+RESULTS:
#+begin_example
removed '.main.org.~undo-tree~'
removed '.README.org.~undo-tree~'
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   README.org
	modified:   main.org

#+end_example

** Commit the changes and push:
#+begin_src sh :shebang #!/bin/sh :results output
  git commit -m "$(cat 'message.txt')"
  git push 
#+end_src

#+RESULTS:
: [main 647c892] Added some convenience stuff to readme.org
:  2 files changed, 14 insertions(+), 5 deletions(-)
